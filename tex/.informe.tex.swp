\documentclass[a4paper,12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage{fancyhdr, float, graphicx, caption}
\usepackage{amsmath, amssymb}
\usepackage{bm}
\usepackage[margin=1in]{geometry}
\usepackage{multicol}
\usepackage{titlesec} 


\titleformat{\subsection}[runin]
  {\normalfont\large\bfseries}{\thesubsection}{1em}{}	
\titleformat{\subsubsection}[runin]
  {\normalfont\normalsize\bfseries}{\thesubsubsection}{1em}{}


\pagestyle{fancy}
\renewcommand{\figurename}{Figura}
\renewcommand\abstractname{\textit{Abstract}}

\fancyhf{}
\fancyhead[LE,RO]{\textit{DFS Server}}
\fancyfoot[RE,CO]{\thepage}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\title{
	%Logo UNR
	\begin{figure}[!h]
		\centering
		\includegraphics[scale=1]{unr.png}
		\label{}
	\end{figure}
	% Pie Logo
	\normalsize
		\textsc{Universidad Nacional de Rosario}\\	
		\textsc{Facultad de Ciencias Exactas, Ingeniería y Agrimensura}\\
		\textit{Licenciatura en Ciencias de la Computación}\\
		\textit{Sistemas Operativos I}\\
	% Título
	\vspace{30pt}
	\hrule{}
	\vspace{15pt}
	\huge
		\textbf{Sistema de archivos distribuído}\\
	\vspace{15pt}
	\hrule{}
	\vspace{30pt}
	% Alumnos/docentes
	\begin{multicols}{2}
	\raggedright
		\large
			\textbf{Alumnos:}\\
		\normalsize
			BORRERO, Paula (P-????)\\
			IVALDI, Ángela (I-0561/4)\\
			MISTA, Agustín (M-6105/1) \\
	\raggedleft
		\large
			\textbf{Docentes:}\\
		\normalsize
			MACHI, Guido\\
			GRINBLAT, Guillermo\\
			DIAZ, José Luis\\
	\end{multicols}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
\date{4 de Julio de 2016}
\maketitle

\pagebreak
%----------------------------------------------------------
\section*{Introducción}
	
	Un servidor de archivos distribuído es un componente de software que le ofrece al usuario final las operaciones necesarias para trabajar con un sistema de archivos virtual, aparentemente centralizado, donde todos los archivos parecen estar en una misma ubicación, cuando en realidad es probable que los mismos estén dispersos en varias unidades de disco, o más aun, en varias computadoras.
	
	En éste informe analizaremos las implementaciones tanto en \textbf{C}  como en \textbf{Erlang} de un servidor de archivos distribuido simple, esto incluye profundizar sobre algunas cuestiones de diseño tales como comunicación entre hilos, concurrencia y performance.
	
\section*{Implementación con Posix Threads}
   
    \subsection*{Estructuras de datos}
    \begin{itemize}
    \item Session: representa las sesiones. Contiene datos que relacionan un cliente con su respectivo worker, seleccionado de forma aleatoria por el dispatcher cuando el usuario se conecta.
    \item Request: se usa para modelar los pedidos a los workers. Si el campo external (int) es 0 el pedido proviene de otro worker, en otro caso el pedido proviene del handler.
    \item Reply: representa las respuestas del worker al handler. Contiene dos campos: uno representa errores al procesar un comando (Es de tipo Error. Si no hay errores es NONE.) y el otro sirve para agregar información extra sobre el resultado.
    \item File: modela cada archivo.
    \item Worker\_Info: permite guardar datos de cada worker, entre ellos: sus archivos, identificador, cola de mensajes y pool de descriptores de archivos.\\
    \end{itemize}
    
    \subsection*{Módulos}
    \begin{itemize}
    \item Server: inicializa la conexión TCP, el dispatcher y los workers.
    \item Dispatcher: espera por nuevas conexiones. Cuando alguna ocurre, se ocupa de crear una sesión (Session) y lanzar un handler.
    \item ClientHandler: se encarga de parsear lo que recibe de cada cliente, convertirlo en un external request y mandarlo al worker correspondiente. Cuando recibe una respuesta (Reply) de algún worker, la procesa y envía el resultado al cliente.
     \item Worker: recibe del handler o de otros workers diferentes peticiones, las cuales intenta llevar a cabo. Opera sobre sus archivos cuando es necesario.
    \end{itemize}
    
    \subsection*{Decisiones de diseño}
	\begin{itemize}
	\item Usamos \textbf{POSIX Messages Queues} para la comunicación entre los distintos nodos. La misma forma un anillo entre los workers.
    \item Para optimizar las operaciones, \textbf{no es necesario que una petición pase por todos los workers}.\\
    Al recibir una petición externa se la va pasando en anillo, el primero que pueda llevarla a cabo lo hará. Si es el worker principal (el que puede comunicarse con el cliente a través del handler) envía su respuesta inmediatamente. Sin embargo, si no lo es, no necesita terminar la vuelta, puede mandarle directamente los resultados al principal para que éste los comunique al exterior. Esto se puede hacer gracias a que se mantiene entre los pedidos la referencia al worker principal (\textit{main\_worker} dentro de \textit{Request}).
    \item Para mostrar los mensajes del servidor se usaron \textbf{banderas de compilación condicional}. Con la bandera DEBUG, se muestran mensajes de estado del servidor. Con DEBUG\_REQUEST podemos también ver la comunicación entre workers.\\
    \end{itemize}
 
    
\section*{Implementación en Erlang}
    En este caso los workers forman un anillo similar a la versión de C. La diferencia es que siempre se realiza toda la vuelta (no hay optimización). Si se resuelve la petición antes de llegar al origen (exitosamente o con error) se propaga la respuesta hasta que llegue al origen. Si se da toda la vuelta sin resolver la petición se retorna error.\\
    Cada worker conserva sus archivos, su pool de descriptores de archivo y el pid del siguiente worker en el anillo. Cada uno recibe mensajes de la forma {Req, Pid, Count}, donde Req representa a los comandos y argumentos, Pid es el PID del cliente solicitante y Count es un contador de saltos, que al llegar al número total de workers (\textit{?N\_WORKERS}) indica que se dió toda la vuelta.\\
    El handler se divide en dos funciones, handle\_client se ocupa de conectar al cliente (\textit{CON}) y handle\_client2 se ocupa del resto de las peticiones una vez que se tiene un identificador de cliente.\\
    Cada archivo es representado mediante una tupla de la forma \{Name, Fd, Opener, Cursor, Size, Content\} y el conjunto de archivos de cada worker es una lista de tuplas de ese tipo.

\section*{Característica adicional}
    Implementamos en Erlang el punto adicional de mensajería tolerante a fallas (con timeout). Luego de 300 milisegundos se lanza el error: ERROR 62 ETIME.\\
    
    Poner algo del pool de fd? 
\end{document}
